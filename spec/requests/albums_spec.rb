require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/albums", type: :request do
  # Album. As you add validations to Album, be sure to
  # adjust the attributes here as well.
  before do
    @user = create(:user)
    sign_in @user
  end

  let(:valid_album_name){ "test_album" }
  let(:valid_album_pictures){
    [ Rack::Test::UploadedFile.new(Rails.root.join('spec/factories/test.jpg'), 'spec/factories/test.jpg') ]
  }
  let(:invalid_album_name) { "" }

  describe "GET /index" do
    it "renders a successful response" do
      create(:album)
      get albums_path
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      @album = create(:album)
      get album_path(@album)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Album" do
        expect {
          post albums_path, params: { album_form: {
              name: valid_album_name,
              pictures: valid_album_pictures
            }
          }
        }.to change(Album, :count).by(1)
      end

      it "redirects to the created album" do
        post albums_path, params: { album_form: {
            name: valid_album_name,
            pictures: valid_album_pictures
          }
        }
        expect(response).to redirect_to(album_url(Album.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Album" do
        expect {
          post albums_path, params: { album_form: {
              name: invalid_album_name,
              pictures: valid_album_pictures
            }
          }
        }.to change(Album, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post albums_path, params: { album_form: {
            name: invalid_album_name,
            pictures: valid_album_pictures
          }
        }
        expect(response).to redirect_to(albums_url)
      end
    end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }
  #
  #     it "updates the requested album" do
  #       album = Album.create! valid_attributes
  #       patch album_url(album), params: { album: new_attributes }
  #       album.reload
  #       skip("Add assertions for updated state")
  #     end
  #
  #     it "redirects to the album" do
  #       album = Album.create! valid_attributes
  #       patch album_url(album), params: { album: new_attributes }
  #       album.reload
  #       expect(response).to redirect_to(album_url(album))
  #     end
  #   end
  #
  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       album = Album.create! valid_attributes
  #       patch album_url(album), params: { album: invalid_attributes }
  #       expect(response).to be_successful
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested album" do
  #     album = Album.create! valid_attributes
  #     expect {
  #       delete album_url(album)
  #     }.to change(Album, :count).by(-1)
  #   end
  #
  #   it "redirects to the albums list" do
  #     album = Album.create! valid_attributes
  #     delete album_url(album)
  #     expect(response).to redirect_to(albums_url)
  #   end
  # end
end
